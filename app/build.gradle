apply plugin: 'com.android.application'

apply plugin: 'io.fabric'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {

//    def getGitHash = { ->
//        def stdout = new ByteArrayOutputStream()
//        exec {
//            commandLine 'git', 'rev-parse', '--short', 'HEAD'
//            standardOutput = stdout
//        }
//        return stdout.toString().trim()
//    }

    compileSdkVersion 27
    defaultConfig {
        applicationId "com.github.kiolk.liftalarm"
        minSdkVersion 14
        targetSdkVersion 27
        versionCode 3
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField 'String', 'GitHash', "\"${getGitHash()}\""
        ext.betaDistributionReleaseNotes = "\"${formReleaseNote}\""
        ext.betaDistributionEmails = "tyteishi@gmail.com"
        ext.betaDistributionGroupAliases = "my-best-testers"
    }

    signingConfigs {
        release {
            storeFile file(keyPath)
            storePassword keyStorePassword
            keyAlias keyAliath
            keyPassword keyPasswordSign
        }
    }

    flavorDimensions "version"

    productFlavors {
        qa {
            // Assigns this product flavor to the "version" flavor dimension.
            // This property is optional if you are using only one dimension.
            dimension "version"
            applicationIdSuffix ".qa"
            versionNameSuffix "-qa"

            signingConfig signingConfigs.release
        }
        prod {
            dimension "version"
            signingConfig signingConfigs.release
            buildConfigField "String", "API_URL", "\"\""
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.release
        }
    }
    sourceSets { main { java.srcDirs = ['src/main/java', 'src/main/groovy'] } }
}

task uploadeToCrashlytics{
    def commit = getCurrentCommit()

    if(commit.matches("(.*)[B,b]ump(.*)")){
        dependsOn("assembleDebug")
        dependsOn('crashlyticsUploadDistributionQaRelease')
    }else{
        println commit
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
//    implementation 'org.codehaus.groovy:groovy:2.4.12:grooid'
//    implementation 'org.codehaus.groovy:groovy-all:2.4.15'
//    implementation localGroovy()
//    implementation 'org.gradle:gradle-core:2.14.1'
//    implementation gradleApi()
//    implementation group: 'org.gradle', name: 'gradle-tooling-api', version: '4.6'

    implementation('com.crashlytics.sdk.android:crashlytics:2.9.6@aar') {
        transitive = true;
    }
}
